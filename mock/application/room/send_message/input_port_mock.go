// Code generated by MockGen. DO NOT EDIT.
// Source: application/room/send_message/input_port.go

// Package mock_room is a generated GoMock package.
package mock_room

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	room "github.com/karamaru-alpha/chat-go-server/application/room/send_message"
)

// MockIInputPort is a mock of IInputPort interface.
type MockIInputPort struct {
	ctrl     *gomock.Controller
	recorder *MockIInputPortMockRecorder
}

// MockIInputPortMockRecorder is the mock recorder for MockIInputPort.
type MockIInputPortMockRecorder struct {
	mock *MockIInputPort
}

// NewMockIInputPort creates a new mock instance.
func NewMockIInputPort(ctrl *gomock.Controller) *MockIInputPort {
	mock := &MockIInputPort{ctrl: ctrl}
	mock.recorder = &MockIInputPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIInputPort) EXPECT() *MockIInputPortMockRecorder {
	return m.recorder
}

// Handle mocks base method.
func (m *MockIInputPort) Handle(arg0 room.InputData) room.OutputData {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle", arg0)
	ret0, _ := ret[0].(room.OutputData)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *MockIInputPortMockRecorder) Handle(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockIInputPort)(nil).Handle), arg0)
}
