// Code generated by MockGen. DO NOT EDIT.
// Source: domain/model/message/factory.go

// Package mock_message is a generated GoMock package.
package mock_message

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	message "github.com/karamaru-alpha/chat-go-server/domain/model/message"
	room "github.com/karamaru-alpha/chat-go-server/domain/model/room"
)

// MockIFactory is a mock of IFactory interface.
type MockIFactory struct {
	ctrl     *gomock.Controller
	recorder *MockIFactoryMockRecorder
}

// MockIFactoryMockRecorder is the mock recorder for MockIFactory.
type MockIFactoryMockRecorder struct {
	mock *MockIFactory
}

// NewMockIFactory creates a new mock instance.
func NewMockIFactory(ctrl *gomock.Controller) *MockIFactory {
	mock := &MockIFactory{ctrl: ctrl}
	mock.recorder = &MockIFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIFactory) EXPECT() *MockIFactoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIFactory) Create(arg0 room.Room, arg1 message.Body) (message.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(message.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIFactoryMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIFactory)(nil).Create), arg0, arg1)
}
