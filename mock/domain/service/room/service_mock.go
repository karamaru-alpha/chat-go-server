// Code generated by MockGen. DO NOT EDIT.
// Source: domain/service/room/service.go

// Package mock_room is a generated GoMock package.
package mock_room

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	room "github.com/karamaru-alpha/chat-go-server/domain/model/room"
)

// MockIDomainService is a mock of IDomainService interface.
type MockIDomainService struct {
	ctrl     *gomock.Controller
	recorder *MockIDomainServiceMockRecorder
}

// MockIDomainServiceMockRecorder is the mock recorder for MockIDomainService.
type MockIDomainServiceMockRecorder struct {
	mock *MockIDomainService
}

// NewMockIDomainService creates a new mock instance.
func NewMockIDomainService(ctrl *gomock.Controller) *MockIDomainService {
	mock := &MockIDomainService{ctrl: ctrl}
	mock.recorder = &MockIDomainServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDomainService) EXPECT() *MockIDomainServiceMockRecorder {
	return m.recorder
}

// Exists mocks base method.
func (m *MockIDomainService) Exists(arg0 room.Room) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockIDomainServiceMockRecorder) Exists(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockIDomainService)(nil).Exists), arg0)
}
